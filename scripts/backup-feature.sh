#!/bin/bash

# Feature-Based Backup Script
# Creates timestamped backup of current project state

# Colors for output
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Get feature name from argument or git branch
FEATURE_NAME=${1:-$(git branch --show-current | sed 's/feature\///')}
DATE=$(date +%Y-%m-%d-%H%M)
BACKUP_DIR="backups/${DATE}-${FEATURE_NAME}"

# Create backups directory if it doesn't exist
mkdir -p backups

echo -e "${BLUE}üîÑ Creating backup: ${BACKUP_DIR}${NC}"

# Create backup excluding unnecessary files
rsync -av --progress \
    --exclude='node_modules' \
    --exclude='.git' \
    --exclude='dist' \
    --exclude='build' \
    --exclude='backups' \
    --exclude='*.log' \
    --exclude='.DS_Store' \
    . "$BACKUP_DIR/"

# Get project info
CURRENT_BRANCH=$(git branch --show-current)
LAST_COMMIT=$(git log -1 --oneline 2>/dev/null || echo "No commits yet")
TEST_STATUS="Unknown"

# Check test status if tests exist
if [ -f "package.json" ] && grep -q '"test"' package.json; then
    echo -e "${BLUE}Running tests...${NC}"
    if npm test --silent 2>/dev/null; then
        TEST_STATUS="‚úÖ Passing"
    else
        TEST_STATUS="‚ùå Failing"
    fi
fi

# Create backup metadata
cat > "$BACKUP_DIR/BACKUP_INFO.md" << EOF
# Backup Information

**Date**: $(date)
**Feature**: $FEATURE_NAME
**Branch**: $CURRENT_BRANCH
**Last Commit**: $LAST_COMMIT
**Test Status**: $TEST_STATUS

## What's Included
- Complete source code
- Configuration files
- Documentation
- Tests
- Environment example files

## How to Restore
\`\`\`bash
# Option 1: Full restore
cp -r $BACKUP_DIR/* .
npm install
npm test

# Option 2: Selective restore
cp $BACKUP_DIR/src/specific-file.js src/
\`\`\`

## Feature Status Checklist
- [ ] Feature implementation complete
- [ ] BDD scenarios written
- [ ] Tests passing
- [ ] Documentation updated
- [ ] Code reviewed
- [ ] Ready for integration

## Notes
_Add any important notes about this backup here_

---
Generated by Flying Nimbus Backup System
EOF

# Create backup summary in main backups folder
if [ ! -f "backups/BACKUP_LOG.md" ]; then
    echo "# Backup Log" > "backups/BACKUP_LOG.md"
    echo "" >> "backups/BACKUP_LOG.md"
    echo "| Date | Time | Feature | Branch | Tests | Size |" >> "backups/BACKUP_LOG.md"
    echo "|------|------|---------|--------|-------|------|" >> "backups/BACKUP_LOG.md"
fi

# Add entry to backup log
BACKUP_SIZE=$(du -sh "$BACKUP_DIR" | cut -f1)
echo "| $(date +%Y-%m-%d) | $(date +%H:%M) | $FEATURE_NAME | $CURRENT_BRANCH | $TEST_STATUS | $BACKUP_SIZE |" >> "backups/BACKUP_LOG.md"

echo -e "${GREEN}‚úÖ Backup created successfully!${NC}"
echo -e "${GREEN}üìÅ Location: $BACKUP_DIR${NC}"
echo -e "${GREEN}üìù Metadata: $BACKUP_DIR/BACKUP_INFO.md${NC}"
echo -e "${GREEN}üìä Size: $BACKUP_SIZE${NC}"

# Reminder for next steps
echo ""
echo -e "${YELLOW}Next steps:${NC}"
echo "1. Continue development in main directory"
echo "2. Create new backup after next milestone"
echo "3. Use 'git worktree' for parallel features"
echo ""
echo -e "${BLUE}Quick restore command:${NC}"
echo "cp -r $BACKUP_DIR/* ."